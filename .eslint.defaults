{
    "extends": [
         "eslint:recommended"      // Enable rules that report common problems
    ],
    "globals": {
        "Promise": true,
        "Symbol": true
    },
    "rules": {
        "semi": 0,

        "no-unsafe-negation": "warn",     // Disallow negating the left operand of relational operators
        "valid-jsdoc": [                  // Enforce valid JSDoc comments
            "warn",
            { "requireParamDescription": false, "requireReturnDescription": false }
        ],
        "valid-typeof": "error",   // Enforce comparing typeof expressions against valid strings
        "array-callback-return": "error", // Enforce return statements in callbacks of array methods
        "block-scoped-var": "error",      // Enforce the use of variables within the scope they are defined
        "consistent-return": "error",     // Require return statements to either always or never specify values
        "curly": "error",          // Enforce consistent brace style for all control statements
        "dot-location": ["error", "property"],  // Enforce consistent newlines before and after dots
        "dot-notation": "error",   // Enforce dot notation whenever possible
        "eqeqeq": ["error", "always", {"null": "ignore"}],  // Require the use of === and !==
        "no-alert": "error",       // Disallow the use of alert, confirm, and prompt
        "no-caller": "error",      // Disallow the use of arguments.caller or arguments.callee
        "no-case-declarations": "error",  // Disallow lexical declarations in case clauses
        "no-else-return": "warn",  // Disallow else blocks after return statements in if statements
        "no-empty-pattern": "error",      // Disallow empty destructuring patterns
        "no-eval": "error",        // Disallow the use of eval()
        "no-extra-label": "warn",  // Disallow unnecessary labels
        "no-floating-decimal": "error",   // Disallow leading or trailing decimal points in numeric literals
        "no-implicit-coercion": "error",  // Disallow shorthand type conversions
        "no-implicit-globals": "error",   // Disallow variable and function declarations in the global scope
        "no-implied-eval": "error",       // Disallow the use of eval()-like methods
        "no-loop-func": "error",   // Disallow function declarations and expressions inside loop statements
        "no-new": "warn",          // Disallow new operators outside of assignments or comparisons
        "no-new-func": "error",    // Disallow new operators with the Function object
        "no-proto": "error",       // Disallow the use of the __proto__ property
        "no-return-await": "warn", // Disallow unnecessary return await
        "no-self-compare": "warn", // Disallow comparisons where both sides are exactly the same
        "no-useless-return": "warn",      // Disallow redundant return statements
        "no-warning-comments": ["warn", { "terms": ["todo", "fixme"] }],  // Disallow specified warning terms in comments
        "no-with": "error",        // Disallow with statements
        "require-await": "error",  // Disallow async functions which have no await expression
        "wrap-iife": ["error", "any"],    // Require parentheses around immediate function invocations
        "strict": "error",         // Require strict mode directives
        "callback-return": "warn", // Require return statements after callbacks
        "handle-callback-err": "warn",    // Require error handling in callbacks
        "no-mixed-requires": "error",     // Disallow require calls to be mixed with regular variable declarations
        "global-require": "error", // This rule requires all calls to require() to be at the top level of the module

        ///////////////////////////////////////////////////
        // Code style

        // ES2015 (ES6)
        "arrow-parens": ["error", "as-needed"], // Require parentheses around arrow function arguments
        "arrow-spacing": ["error", { "before": true, "after": true }],         // Enforce consistent spacing before and after the arrow in arrow functions
        "generator-star-spacing": ["error", {"before": false, "after": true}], // Enforce consistent spacing around * operators in generator functions
        //"no-confusing-arrow": "error",      // Disallow arrow functions where they could be confused with comparisons: var x = a => 1 ? 2 : 3 ===> var x = a => { return 1 ? 2 : 3; }
        "no-duplicate-imports": "error",    // Disallow duplicate module imports
        "no-useless-computed-key": "warn",  // Disallow unnecessary computed property keys in object literals
        "no-useless-rename": "warn",        // Disallow renaming import, export, and destructured assignments to the same name
        "no-var": "error",                  // Require let or const instead of var
        "object-shorthand": "warn",         // Enforce use shorthand syntax for object literals
        "prefer-const": "warn",             // Require const declarations for variables that are never reassigned after declared
        "prefer-destructuring": ["error", { "array": true, "object": false }], // Require destructuring from arrays and/or objects
        "prefer-numeric-literals": "warn",  // Disallow parseInt() in favor of binary, octal, and hexadecimal literals
        "prefer-rest-params": "error",      // Require rest parameters instead of arguments
        "prefer-spread": "warn",            // Require spread operators instead of .apply()
        "prefer-template": "warn",          // Require template literals instead of string concatenation
        "rest-spread-spacing": "error",     // Enforce spacing between rest and spread operators and their expressions
        "template-curly-spacing": "error",  // Require spacing around embedded expressions of template strings
        "yield-star-spacing": ["error", {"before": false, "after": true}]      // Require or disallow spacing around the * in yield* expressions
    }
}